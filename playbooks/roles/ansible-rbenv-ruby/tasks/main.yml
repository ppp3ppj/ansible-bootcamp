---
- name: "Install required packages - Ruby {{ ruby_version }}"
  become: yes
  apt:
    name: "{{ required_packages }}"
    state: present

- name: Clone rbenv repository
  git:
    repo: https://github.com/rbenv/rbenv.git
    dest: "{{ rbenv_root }}"
    clone: yes
    update: no

- name: Check if shell config file exists
  stat:
    path: "{{ shell_config_file }}"
  register: shell_config_check

- name: Add rbenv init to shell configuration file if not already added
  block:
    - name: Set rbenv init command for the shell
      set_fact:
        rbenv_init_command: "eval \"$(~/.rbenv/bin/rbenv init - {{ shell_type }})\""

    - name: Debug rbenv init command
      debug:
        msg: "rbenv init command is: {{ rbenv_init_command }}"

    - name: Add rbenv init to ~/.bashrc if not already there (bash)
      lineinfile:
        path: ~/.bashrc
        line: "{{ rbenv_init_command }}"
        create: yes
        insertafter: EOF
      when: shell_type == "bash" and shell_config_check.stat.exists and rbenv_init_command is defined

    - name: Add rbenv init to ~/.zshrc if not already there (zsh)
      lineinfile:
        path: ~/.zshrc
        line: "{{ rbenv_init_command }}"
        create: yes
        insertafter: EOF
      when: shell_type == "zsh" and shell_config_check.stat.exists and rbenv_init_command is defined

    - name: Source shell config file and restart shell
      shell: |
        source {{ shell_config_file }} && exec $SHELL
      args:
        executable: "{{ shell_executable_default }}"
      when: shell_config_check.stat.exists
  when: shell_config_check.stat.exists

- name: Clone ruby-build repository
  git:
    repo: https://github.com/rbenv/ruby-build.git
    dest: "{{ rbenv_root }}/plugins/ruby-build"
    clone: yes
  when: shell_config_check.stat.exists

- name: Restart shell
  shell: "source {{ shell_config_file }}"
  register: output_source_shell
  args:
    executable: "{{ shell_executable_default }}"
  when: shell_config_check.stat.exists

- debug:
    msg: "{{ output_source_shell }}"

- name: Check rbenv version
  shell: "{{ rbenv_root }}/bin/rbenv --version"
  register: rbenv_version_output

- debug:
    msg: "rbenv version is {{ rbenv_version_output.stdout }}"

- name: Check if Ruby is installed
  shell: "ruby -v"
  register: ruby_check
  changed_when: false
  ignore_errors: true

- debug:
    msg: "Ruby is installed with version {{ ruby_check.stdout }}"
  when: ruby_check.rc == 0

- debug:
    msg: "Ruby is not installed"
  when: ruby_check.rc != 0

- name: Check if required ruby version is installed
  stat:
    path: "{{ ruby_install_dir }}"
  register: ruby_version_dir_stat

- name: Install ruby {{ ruby_version }}
  when: not ruby_version_dir_stat.stat.exists # Avoid rebuilding ruby because it takes a really long time
  command: "{{ rbenv_root }}/bin/rbenv install {{ ruby_version }}"
  args:
    executable: "{{ shell_executable_default }}"
  environment:
    PATH: "{{ rbenv_root }}/bin:{{ rbenv_root }}/shims:{{ ansible_env.PATH }}"

- name: Set ruby version as global default
  command: "{{ rbenv_root }}/bin/rbenv global {{ ruby_version }}"
  args:
    executable: "{{ shell_executable_default }}"
  environment:
    PATH: "{{ rbenv_root }}/bin:{{ rbenv_root }}/shims:{{ ansible_env.PATH }}"
